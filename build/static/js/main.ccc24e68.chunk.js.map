{"version":3,"sources":["components/Header.js","store/context.js","components/List.js","components/AddRoundModal.js","components/DetailsModal.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","createContext","users","rounds","roundUserInfo","setUsers","setRounds","setRoundUserInfo","List","list","context","useContext","AppContext","columns","title","key","render","text","record","index","playerId","user","find","item","get","getUserName","player","dataIndex","dataSource","AddRoundModal","state","loading","roundNO","dateTime","leverage","userAmount","handleOk","props","isModify","roundIndex","round","r","AV","Object","createWithoutData","set","allRoundUserInfos","keys","forEach","userId","findUser","info","extend","push","Promise","all","save","saveAll","then","onOk","RoundUserInfo","handleDateTimeChange","v","setState","format","handleLeverageChange","handleAmountChange","handleCancel","onCancel","ret","ellipsis","style","width","onChange","value","moment","this","concat","map","amount","length","prevProps","visible","calcState","confirmLoading","destroyOnClose","getTableColumns","pagination","scroll","x","Component","contextType","DetailsModal","handleModifyClick","onModify","getUserRoundInfo","onClick","App","showModal","addLoading","showDetailsModal","modifyIndex","getUsers","Query","players","getAllRounds","res","getRoundInfo","roundInfos","query","equalTo","calcList","handleAddClick","handleDetailsClick","handleModalCancel","handleModalConfirm","handleDetailsConfirm","handleDetailsCancel","handleModify","tmp","lastRound","currentLeverage","userRoundInfo","max","min","total","totalBalance","count","Big","plus","valueOf","times","_","values","sort","a","b","Provider","type","Boolean","window","location","hostname","match","init","appId","appKey","serverURL","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ccc24e68.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Header() {\n  return (\n    <div className=\"app-header\">\n      <h1>一壶科技德州大赛排行榜</h1>\n    </div>\n  );\n}","import React from 'react';\n\nexport const defaultContext = {\n  users: [],\n  rounds: [],\n  roundUserInfo: [],\n  setUsers: () => {},\n  setRounds: () => {},\n  setRoundUserInfo: () => {},\n};\n\nexport default React.createContext(defaultContext);\n","import React, { useContext } from 'react';\nimport { Table } from 'antd';\nimport AppContext from '../store/context';\n\nexport default function List({ list }) {\n  const context = useContext(AppContext);\n  const columns = [\n    {\n      title: '排名',\n      key: 'rank',\n      render: (text, record, index) => {\n        return index + 1;\n      },\n    },\n    {\n      title: '选手',\n      key: 'username',\n      render: (text, record) => {\n        return getUserName(record.player.get('objectId'));\n      },\n    },\n    { title: '参赛次数', key: 'count', dataIndex: 'count' },\n    { title: '单次最大盈利', key: 'max', dataIndex: 'max' },\n    { title: '单次最大亏损', key: 'min', dataIndex: 'min' },\n    { title: '累计筹码盈亏', key: 'total', dataIndex: 'total' },\n    { title: '累计盈亏金额', key: 'totalBalance', dataIndex: 'totalBalance' },\n    { title: '当前赔率', key: 'currentLeverage', dataIndex: 'currentLeverage' },\n    { title: '操作', key: 'opt', dataIndex: 'opt' },\n  ];\n\n  function getUserName(playerId) {\n    let { users } = context;\n    let user = users.find((item) => item.get('objectId') === playerId);\n    if (user) {\n      return user.get('name');\n    }\n    return '';\n  }\n\n  return (\n    <div>\n      <Table dataSource={list} columns={columns} />\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { Modal, InputNumber, DatePicker, Table } from 'antd';\nimport AppContext from '../store/context';\nimport AV from 'leancloud-storage';\nimport moment from 'moment';\n\nexport default class AddRoundModal extends Component {\n  static contextType = AppContext;\n\n  state = {\n    loading: false,\n    list: [{ roundNO: 1 }],\n    dateTime: '',\n    leverage: 0.1,\n    userAmount: {},\n  };\n\n  handleOk = () => {\n    let { dateTime, leverage, userAmount } = this.state;\n    if (this.props.isModify) {\n      let { roundIndex } = this.props;\n      let round = this.context.rounds[roundIndex];\n      let roundUserInfo = this.context.roundUserInfo[roundIndex];\n      const r = AV.Object.createWithoutData('Round', round.get('objectId'));\n      r.set('dateTime', dateTime);\n      r.set('leverage', leverage);\n      let allRoundUserInfos = [];\n      Object.keys(userAmount).forEach((userId) => {\n        let info = roundUserInfo.find((item) => {\n          return item.get('player').get('objectId') === userId;\n        });\n        let findUser;\n        if (info) {\n          findUser = info;\n        } else {\n          const user = this.context.users.find(\n            (item) => item.get('objectId') === userId\n          );\n          const RoundUserInfo = AV.Object.extend('RoundUserInfo');\n          findUser = new RoundUserInfo();\n          findUser.set('round', r);\n          findUser.set('player', user);\n        }\n        findUser.set('amount', userAmount[userId]);\n        allRoundUserInfos.push(findUser);\n      });\n      Promise.all([r.save(), AV.Object.saveAll(allRoundUserInfos)]).then(() => {\n        if (this.props.onOk) {\n          this.props.onOk();\n        }\n      });\n    } else {\n      const Round = AV.Object.extend('Round');\n      const round = new Round();\n      round.set('dateTime', dateTime);\n      round.set('leverage', leverage);\n      const RoundUserInfo = AV.Object.extend('RoundUserInfo');\n      let allRoundUserInfos = [];\n      Object.keys(userAmount).forEach((userId) => {\n        const roundUserInfo = new RoundUserInfo();\n        const user = this.context.users.find(\n          (item) => item.get('objectId') === userId\n        );\n        roundUserInfo.set('round', round);\n        roundUserInfo.set('player', user);\n        roundUserInfo.set('amount', userAmount[userId]);\n        allRoundUserInfos.push(roundUserInfo);\n      });\n      AV.Object.saveAll(allRoundUserInfos).then(() => {\n        if (this.props.onOk) {\n          this.props.onOk();\n        }\n      });\n    }\n  };\n\n  handleDateTimeChange = (v) => {\n    this.setState({\n      dateTime: v.format('YYYY/MM/DD'),\n    });\n  };\n\n  handleLeverageChange = (v) => {\n    this.setState({\n      leverage: v,\n    });\n  };\n\n  handleAmountChange = (v, user) => {\n    let userAmount = this.state.userAmount;\n    userAmount[user.get('objectId')] = +v;\n    this.setState({\n      userAmount,\n    });\n  };\n\n  getTableColumns() {\n    let ret = [\n      { title: '场次', key: 'roundNO', dataIndex: 'roundNO', ellipsis: true },\n      {\n        title: '日期',\n        key: 'dateTime',\n        ellipsis: true,\n        render: () => {\n          return (\n            <div style={{ width: '150px' }}>\n              <DatePicker\n                onChange={this.handleDateTimeChange}\n                format=\"YYYY/MM/DD\"\n                value={moment(this.state.dateTime, 'YYYY/MM/DD')}\n              />\n            </div>\n          );\n        },\n      },\n      {\n        title: '杠杆比例',\n        key: 'leverage',\n        ellipsis: true,\n        render: () => {\n          return (\n            <InputNumber\n              onChange={this.handleLeverageChange}\n              value={this.state.leverage}\n            />\n          );\n        },\n      },\n    ];\n    let { users } = this.context;\n    return ret.concat(\n      users.map((user) => {\n        return {\n          title: user.get('name'),\n          key: user.get('objectId'),\n          ellipsis: true,\n          render: (text, record) => {\n            return (\n              <InputNumber\n                onChange={(v) => this.handleAmountChange(v, user)}\n                value={this.state.userAmount[user.get('objectId')]}\n              />\n            );\n          },\n        };\n      })\n    );\n  }\n\n  calcState() {\n    let { rounds } = this.context;\n    let { isModify, roundIndex } = this.props;\n    if (isModify) {\n      let { roundUserInfo } = this.context;\n      let list = roundUserInfo[roundIndex];\n      let round = rounds[roundIndex];\n      let amount = {};\n      if (list) {\n        list.forEach((item) => {\n          amount[item.get('player').get('objectId')] = item.get('amount');\n        });\n      }\n      this.setState({\n        list: [{ roundNO: roundIndex + 1 }],\n        userAmount: amount,\n        leverage: round.get('leverage'),\n        dateTime: round.get('dateTime'),\n      });\n    } else {\n      this.setState({\n        list: [{ roundNO: rounds.length + 1 }],\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!prevProps.visible && this.props.visible) {\n      this.calcState();\n    }\n  }\n\n  handleCancel = () => {\n    this.setState({\n      loading: false,\n      list: [{ roundNO: 1 }],\n      dateTime: '',\n      leverage: 0.1,\n      userAmount: {},\n    });\n    this.props.onCancel();\n  };\n\n  render() {\n    return (\n      <Modal\n        visible={this.props.visible}\n        onCancel={this.handleCancel}\n        onOk={this.handleOk}\n        confirmLoading={this.state.loading}\n        width={1200}\n        destroyOnClose\n      >\n        <div className=\"add-round-wrap\">\n          <Table\n            dataSource={this.state.list}\n            columns={this.getTableColumns()}\n            pagination={false}\n            scroll={{ x: true }}\n          />\n        </div>\n      </Modal>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Modal, Table } from 'antd';\nimport AppContext from '../store/context';\n\nexport default class DetailsModal extends Component {\n  static contextType = AppContext;\n\n  getTableColumns() {\n    let ret = [\n      {\n        title: '场次',\n        key: 'roundNO',\n        ellipsis: true,\n        render: (text, record, index) => {\n          return index + 1;\n        },\n      },\n      {\n        title: '日期',\n        key: 'dateTime',\n        ellipsis: true,\n        render: (text, record) => {\n          return record.get('dateTime');\n        },\n      },\n      {\n        title: '杠杆比例',\n        key: 'leverage',\n        ellipsis: true,\n        render: (text, record) => {\n          return record.get('leverage');\n        },\n      },\n    ];\n    let { users } = this.context;\n    return ret.concat(\n      users.map((user) => {\n        return {\n          title: user.get('name'),\n          key: user.get('objectId'),\n          ellipsis: true,\n          render: (text, record, index) => {\n            return this.getUserRoundInfo(user.get('objectId'), index);\n          },\n        };\n      }),\n      {\n        title: '操作',\n        key: 'opt',\n        render: (text, record, index) => {\n          return (\n            <div className=\"details-opt\">\n              <span onClick={() => this.handleModifyClick(index)}>修改</span>\n            </div>\n          );\n        },\n      }\n    );\n  }\n\n  handleModifyClick = (index) => {\n    this.props.onModify(index);\n  }\n\n  getUserRoundInfo = (userId, index) => {\n    let { roundUserInfo } = this.context;\n    let list = roundUserInfo[index];\n    if (list) {\n      let info = list.find((item) => {\n        return item.get('player').get('objectId') === userId;\n      });\n      return (info && info.get('amount')) || '';\n    }\n    return '';\n  };\n\n  render() {\n    let { rounds } = this.context;\n    return (\n      <Modal\n        visible={this.props.visible}\n        onCancel={this.props.onCancel}\n        onOk={this.props.onOk}\n        width={1200}\n      >\n        <div className=\"details-round-wrap\">\n          <Table\n            dataSource={rounds}\n            columns={this.getTableColumns()}\n            pagination={false}\n            scroll={{ x: true }}\n          />\n        </div>\n      </Modal>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport List from './components/List';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport AppContext from './store/context';\nimport AV from 'leancloud-storage';\nimport { Button } from 'antd';\nimport AddRoundModal from './components/AddRoundModal';\nimport DetailsModal from './components/DetailsModal';\nimport _ from 'lodash';\nimport Big from 'big.js';\n\nexport default class App extends Component {\n  state = {\n    users: [],\n    rounds: [],\n    roundUserInfo: [],\n    setUsers: this.setUsers,\n    setRounds: this.setRounds,\n    setRoundUserInfo: this.setRoundUserInfo,\n\n    list: [],\n\n    showModal: false,\n    addLoading: false,\n    showDetailsModal: false,\n\n    modifyIndex: -1,\n    isModify: false,\n  };\n  componentDidMount() {\n    this.getUsers();\n    this.getAllRounds();\n  }\n  getUsers = () => {\n    const query = new AV.Query('Player');\n    query.find().then((players) => {\n      this.setUsers(players);\n    });\n  };\n  setUsers = (list) => {\n    this.setState({\n      users: list,\n    });\n  };\n  getAllRounds = () => {\n    const rounds = new AV.Query('Round');\n    rounds.find().then((res) => {\n      Promise.all(\n        res.map((round) => {\n          return this.getRoundInfo(round);\n        })\n      ).then((roundInfos) => {\n        this.setRounds(res);\n        this.setRoundUserInfo(roundInfos);\n      });\n    });\n  };\n  setRounds = (list) => {\n    this.setState({\n      rounds: list,\n    });\n  };\n  getRoundInfo = (round) => {\n    const query = new AV.Query('RoundUserInfo');\n    query.equalTo('round', round);\n    return query.find();\n  };\n  setRoundUserInfo = (list) => {\n    this.setState(\n      {\n        roundUserInfo: list,\n      },\n      this.calcList\n    );\n  };\n  handleAddClick = () => {\n    this.setState({\n      showModal: true,\n      isModify: false,\n    });\n  };\n  handleDetailsClick = () => {\n    this.setState({\n      showDetailsModal: true,\n    });\n  };\n  handleModalCancel = () => {\n    this.setState({\n      showModal: false,\n    });\n  };\n  handleModalConfirm = () => {\n    this.setState({\n      showModal: false,\n    });\n    this.getAllRounds();\n  };\n  handleDetailsConfirm = () => {\n    this.setState({\n      showDetailsModal: false,\n    });\n  };\n  handleDetailsCancel = () => {\n    this.setState({\n      showDetailsModal: false,\n    });\n  };\n  calcList() {\n    let { roundUserInfo, rounds } = this.state;\n    let tmp = {};\n    let lastRound = rounds[rounds.length - 1];\n    let currentLeverage = 0;\n    if (lastRound) {\n      currentLeverage = lastRound.get('leverage');\n    }\n    roundUserInfo.forEach((round, index) => {\n      let leverage = rounds[index].get('leverage');\n      round.forEach((info) => {\n        let player = info.get('player');\n        let amount = info.get('amount');\n        amount = +amount;\n        let playerId = player.get('objectId');\n        let userRoundInfo = tmp[playerId];\n        if (!userRoundInfo) {\n          userRoundInfo = {\n            max: 0,\n            min: 0,\n            total: 0,\n            totalBalance: 0,\n            count: 0,\n            player,\n            currentLeverage,\n          };\n        }\n        if (amount > userRoundInfo.max) {\n          userRoundInfo.max = amount;\n        }\n        if (amount < userRoundInfo.min) {\n          userRoundInfo.min = amount;\n        }\n        userRoundInfo.total = new Big(userRoundInfo.total)\n          .plus(amount)\n          .valueOf();\n        userRoundInfo.totalBalance = new Big(userRoundInfo.totalBalance)\n          .plus(new Big(amount).times(leverage))\n          .valueOf();\n        if (amount !== 0) {\n          userRoundInfo.count++;\n        }\n        tmp[playerId] = userRoundInfo;\n      });\n    });\n    let list = _.values(tmp);\n    list.sort((a, b) => {\n      return b.totalBalance - a.totalBalance;\n    });\n    this.setState({\n      list,\n    });\n  }\n  handleModify = (index) => {\n    this.setState({\n      modifyIndex: index,\n      isModify: true,\n      showDetailsModal: false,\n      showModal: true,\n    });\n  };\n  render() {\n    let {\n      users,\n      rounds,\n      roundUserInfo,\n      setUsers,\n      setRounds,\n      setRoundUserInfo,\n      list,\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <AppContext.Provider\n          value={{\n            users,\n            rounds,\n            roundUserInfo,\n            setUsers,\n            setRounds,\n            setRoundUserInfo,\n          }}\n        >\n          <Header />\n          <List list={list} />\n          <div className=\"btn-wrap\">\n            <Button type=\"primary\" onClick={this.handleDetailsClick}>\n              明细\n            </Button>\n            <Button type=\"primary\" onClick={this.handleAddClick}>\n              增加记录\n            </Button>\n          </div>\n          <AddRoundModal\n            visible={this.state.showModal}\n            onOk={this.handleModalConfirm}\n            onCancel={this.handleModalCancel}\n            isModify={this.state.isModify}\n            roundIndex={this.state.modifyIndex}\n          ></AddRoundModal>\n          <DetailsModal\n            visible={this.state.showDetailsModal}\n            onOk={this.handleDetailsConfirm}\n            onCancel={this.handleDetailsCancel}\n            onModify={this.handleModify}\n          />\n        </AppContext.Provider>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AV from 'leancloud-storage';\n\nAV.init({\n  appId: 'xfKlG0D6VO6MgwOUTzQ31f7W-gzGzoHsz',\n  appKey: 'k9TuwPqFQmsMqj3HYa83WCFs',\n  serverURL: 'https://xfklg0d6.lc-cn-n1-shared.com',\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}