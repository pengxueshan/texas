{"version":3,"sources":["pages/Encrypt/hex2dec.js","pages/Encrypt/index.tsx"],"names":["add","x","y","base","z","n","Math","max","length","carry","i","zi","push","floor","multiplyByNumber","num","result","power","convertBase","str","fromBase","toBase","digits","split","ary","parseInt","isNaN","parseToDigitsArray","outArray","out","toString","decToHex","decStr","opts","hidePrefix","prefix","hex","hexToDec","hexStr","substring","toLowerCase","encryptIV","CryptoJS","enc","Utf8","parse","Encrypt","state","getInitState","encryptKey","encrypt","generateEncryptKey","srcs","encrypted","AES","iv","mode","CBC","padding","pad","Pkcs7","console","log","ciphertext","Base64","decrypt","encryptedString","decryptedStr","setState","decryptedString","p","localStorage","getItem","g","serverPubKey","this","DH","createDiffieHellman","generateKeys","deServerKey","Buffer","from","originKey","computeSecret","tmp","slice","className","htmlFor","type","value","onChange","e","target","setItem","onClick","Component"],"mappings":"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","file":"static/js/5.5b7cdb2b.chunk.js","sourcesContent":["/**\n * A function for converting hex <-> dec w/o loss of precision.\n *\n * The problem is that parseInt(\"0x12345...\") isn't precise enough to convert\n * 64-bit integers correctly.\n *\n * Internally, this uses arrays to encode decimal digits starting with the least\n * significant:\n * 8 = [8]\n * 16 = [6, 1]\n * 1024 = [4, 2, 0, 1]\n *\n * Source: http://www.danvk.org/hex2dec.html\n */\n\n// Adds two arrays for the given base (10 or 16), returning the result.\n// This turns out to be the only \"primitive\" operation we need.\nfunction add(x, y, base) {\n  var z = [];\n  var n = Math.max(x.length, y.length);\n  var carry = 0;\n  var i = 0;\n  while (i < n || carry) {\n    var xi = i < x.length ? x[i] : 0;\n    var yi = i < y.length ? y[i] : 0;\n    var zi = carry + xi + yi;\n    z.push(zi % base);\n    carry = Math.floor(zi / base);\n    i++;\n  }\n  return z;\n}\n\n// Returns a*x, where x is an array of decimal digits and a is an ordinary\n// JavaScript number. base is the number base of the array x.\nfunction multiplyByNumber(num, x, base) {\n  if (num < 0) return null;\n  if (num == 0) return [];\n\n  var result = [];\n  var power = x;\n  while (true) {\n    if (num & 1) {\n      result = add(result, power, base);\n    }\n    num = num >> 1;\n    if (num === 0) break;\n    power = add(power, power, base);\n  }\n\n  return result;\n}\n\nfunction parseToDigitsArray(str, base) {\n  var digits = str.split('');\n  var ary = [];\n  for (var i = digits.length - 1; i >= 0; i--) {\n    var n = parseInt(digits[i], base);\n    if (isNaN(n)) return null;\n    ary.push(n);\n  }\n  return ary;\n}\n\nfunction convertBase(str, fromBase, toBase) {\n  var digits = parseToDigitsArray(str, fromBase);\n  if (digits === null) return null;\n\n  var outArray = [];\n  var power = [1];\n  for (var i = 0; i < digits.length; i++) {\n    // invariant: at this point, fromBase^i = power\n    if (digits[i]) {\n      outArray = add(\n        outArray,\n        multiplyByNumber(digits[i], power, toBase),\n        toBase\n      );\n    }\n    power = multiplyByNumber(fromBase, power, toBase);\n  }\n\n  var out = '';\n  for (var i = outArray.length - 1; i >= 0; i--) {\n    out += outArray[i].toString(toBase);\n  }\n  if (out === '') {\n    out = '0';\n  }\n  return out;\n}\n\nexport function decToHex(decStr, opts) {\n  var hidePrefix = opts && opts.prefix === false;\n  var hex = convertBase(decStr, 10, 16);\n  return hex ? (hidePrefix ? hex : '0x' + hex) : null;\n}\n\nexport function hexToDec(hexStr) {\n  if (hexStr.substring(0, 2) === '0x') hexStr = hexStr.substring(2);\n  hexStr = hexStr.toLowerCase();\n  return convertBase(hexStr, 16, 10);\n}\n\nexport default {\n  hexToDec: hexToDec,\n  decToHex: decToHex\n};\n","import React, { Component } from 'react';\nimport { createDiffieHellman } from 'diffie-hellman';\nimport CryptoJS from 'crypto-js';\nimport { decToHex, hexToDec } from './hex2dec';\n\nimport './encrypt.scss';\n\ninterface State {\n  p: string;\n  g: string;\n  serverPubKey: string;\n  encryptedString: string;\n  decryptedString: string;\n  encryptKey: string;\n}\n\nlet encryptIV = CryptoJS.enc.Utf8.parse('A-16-Byte-String');\n\nexport default class Encrypt extends Component {\n  state: State = this.getInitState();\n\n  encryptKey: string = '';\n\n  getInitState(): State {\n    return {\n      p: localStorage.getItem('p') || '',\n      g: localStorage.getItem('g') || '',\n      serverPubKey: localStorage.getItem('serverPubKey') || '',\n      encryptedString: localStorage.getItem('encryptedString') || '',\n      decryptedString: '',\n      encryptKey: localStorage.getItem('encryptKey') || ''\n    };\n  }\n\n  encrypt = () => {\n    if (!this.encryptKey) {\n      this.generateEncryptKey();\n    }\n    let srcs = CryptoJS.enc.Utf8.parse('hello world');\n    let encrypted = CryptoJS.AES.encrypt(srcs, this.encryptKey, {\n      iv: encryptIV,\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7\n    });\n    // @ts-ignore\n    console.log(encrypted.ciphertext.toString(CryptoJS.enc.Base64));\n    // @ts-ignore\n    return encrypted.ciphertext.toString(CryptoJS.enc.Base64);\n  }\n\n  decrypt = () => {\n    if (!this.encryptKey) {\n      this.generateEncryptKey();\n    }\n    const { encryptedString } = this.state;\n    let decrypt = CryptoJS.AES.decrypt(encryptedString, this.encryptKey, {\n      iv: encryptIV,\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7,\n    });\n    let decryptedStr = decrypt.toString(CryptoJS.enc.Utf8);\n    this.setState({\n      decryptedString: decryptedStr.toString(),\n    });\n  };\n\n  generateEncryptKey() {\n    const { p, g, serverPubKey, encryptKey } = this.state;\n    if (encryptKey) {\n      this.encryptKey = CryptoJS.enc.Utf8.parse(encryptKey);\n      return;\n    }\n    if (p && g && serverPubKey) {\n      let DH = createDiffieHellman(\n        decToHex(p, { prefix: false }) as string,\n        'hex',\n        decToHex(g, { prefix: false }) as string,\n        'hex'\n      );\n      DH.generateKeys();\n      let deServerKey = Buffer.from(serverPubKey, 'base64').toString();\n      // @ts-ignore\n      let originKey = DH.computeSecret(deServerKey);\n      let tmp: string = hexToDec(originKey.toString('hex'))?.slice(0, 32) || '';\n      this.encryptKey = CryptoJS.enc.Utf8.parse(tmp);\n    }\n  }\n\n  render() {\n    let { p, g, serverPubKey, encryptedString, decryptedString, encryptKey } = this.state;\n    return (\n      <div className=\"encrypt-wrap\">\n        <h3>AES解密</h3>\n        {/* <div className=\"row\">\n          <label htmlFor=\"\">P:</label>\n          <input\n            type=\"text\"\n            value={p}\n            onChange={(e) => {\n              let p = e.target.value;\n              localStorage.setItem('p', p);\n              this.setState({\n                p,\n              });\n            }}\n          />\n        </div>\n        <div className=\"row\">\n          <label htmlFor=\"\">G:</label>\n          <input\n            type=\"text\"\n            value={g}\n            onChange={(e) => {\n              let g = e.target.value;\n              localStorage.setItem('g', g);\n              this.setState({\n                g,\n              });\n            }}\n          />\n        </div>\n        <div className=\"row\">\n          <label htmlFor=\"\">server public key:</label>\n          <input\n            type=\"text\"\n            value={serverPubKey}\n            onChange={(e) => {\n              let serverPubKey = e.target.value;\n              localStorage.setItem('serverPubKey', serverPubKey);\n              this.setState({\n                serverPubKey,\n              });\n            }}\n          />\n        </div> */}\n        <div className=\"row\">\n          <label htmlFor=\"\">待解密字符串:</label>\n          <input\n            type=\"text\"\n            value={encryptedString}\n            onChange={(e) => {\n              let encryptedString = e.target.value;\n              localStorage.setItem('encryptedString', encryptedString);\n              this.setState({\n                encryptedString,\n              });\n            }}\n          />\n        </div>\n        <div className=\"row\">\n          <label htmlFor=\"\">AES密钥:</label>\n          <input\n            type=\"text\"\n            value={encryptKey}\n            onChange={(e) => {\n              let encryptKey = e.target.value;\n              localStorage.setItem('encryptKey', encryptKey);\n              this.setState({\n                encryptKey,\n              });\n            }}\n          />\n        </div>\n        <div className=\"row\">\n          <button onClick={() => this.decrypt()}>解密</button>\n        </div>\n        <div className=\"decrypt-value\">{decryptedString}</div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}