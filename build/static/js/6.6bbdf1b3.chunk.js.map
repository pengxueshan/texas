{"version":3,"sources":["components/List/index.tsx","components/AddRoundModal/index.tsx","components/DetailsModal/index.tsx","components/AddPlayerModal/index.tsx","pages/Home.tsx"],"names":["List","list","winTimes","columns","title","key","render","text","record","index","player","avatar","name","className","size","src","icon","UserOutlined","dataIndex","sorter","a","b","max","min","total","totalBalance","num","playNum","playerId","toFixed","getWinRate","id","dataSource","pagination","AddRoundModal","state","roundNO","props","roundIndex","rounds","length","dateTime","leverage","userAmount","handleOk","isModify","undefined","updateDatas","roundDetails","date","players","Object","keys","map","amount","updateRound","then","onOk","catch","e","message","error","datas","params","playerInfo","addRound","handleCancel","setState","onCancel","prevProps","this","modifyData","tmp","forEach","v","format","ellipsis","style","width","onChange","handleDateTimeChange","value","moment","handleLeverageChange","concat","handleAmountChange","visible","getTableColumns","scroll","x","Component","connect","store","DetailsModal","getRoundDetails","setRoundDetails","setWinTimes","formatWinTimes","ret","getRoundInfo","onClick","handleModifyClick","onModify","p","find","info","mapDispatchToProps","AddPlayerModal","confirmLoading","playerName","getPlayers","setPlayers","addPlayer","handleNameChange","target","placeholder","Home","showAddModal","showDetailsModal","showAddPlayerModal","modifyIndex","isAuthenticated","type","renderButtons","onAddDone"],"mappings":"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","file":"static/js/6.6bbdf1b3.chunk.js","sourcesContent":["import React from 'react';\nimport { Table, Avatar } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport { RankListData, Player, WinTimes } from '../../utils/types';\nimport './list.scss';\n\ninterface Props {\n  list: Array<RankListData>;\n  winTimes: WinTimes;\n}\n\nexport default function List({ list, winTimes }: Props) {\n  const columns = [\n    {\n      title: '排名',\n      key: 'rank',\n      render: (text: string, record: RankListData, index: number) => {\n        return index + 1;\n      },\n    },\n    {\n      title: '选手',\n      key: 'username',\n      render: (text: string, record: RankListData) => {\n        let player = record.player;\n        let avatar = player.avatar;\n        let name = player.name;\n        return (\n          <div className=\"player-wrap\">\n            <div className=\"avatar-wrap\">\n              {avatar ? (\n                <Avatar size={24} src={avatar} />\n              ) : (\n                <Avatar size={24} icon={<UserOutlined />} />\n              )}\n            </div>\n            {name}\n          </div>\n        );\n      },\n    },\n    { title: '参赛次数', key: 'playNum', dataIndex: 'playNum' },\n    {\n      title: '单次最大盈利',\n      key: 'max',\n      dataIndex: 'max',\n      sorter: (a: RankListData, b: RankListData) => a.max - b.max,\n    },\n    {\n      title: '单次最大亏损',\n      key: 'min',\n      dataIndex: 'min',\n      sorter: (a: RankListData, b: RankListData) => a.min - b.min,\n    },\n    {\n      title: '累计筹码盈亏',\n      key: 'total',\n      dataIndex: 'total',\n      sorter: (a: RankListData, b: RankListData) => a.total - b.total,\n    },\n    {\n      title: '累计盈亏金额',\n      key: 'totalBalance',\n      dataIndex: 'totalBalance',\n      sorter: (a: RankListData, b: RankListData) =>\n        a.totalBalance - b.totalBalance,\n    },\n    {\n      title: '胜率',\n      key: 'winRate',\n      render: (text: string, record: RankListData) => {\n        const player: Player = record.player;\n        const num = record.playNum;\n        return getWinRate(player.id, num);\n      },\n    },\n    { title: '当前赔率', key: 'currentLeverage', dataIndex: 'currentLeverage' },\n    { title: '操作', key: 'opt', dataIndex: 'opt' },\n  ];\n\n  function getWinRate(playerId: number, num: number) {\n    if (!winTimes[playerId] || !num) return 0;\n    return (winTimes[playerId] / num).toFixed(2);\n  }\n\n  return (\n    <div className=\"rank-wrap\">\n      <Table dataSource={list} columns={columns} pagination={false} />\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { Modal, InputNumber, DatePicker, Table, message } from 'antd';\nimport moment from 'moment';\nimport { Player, RoundDetails } from '../../utils/types';\nimport { addRound, updateRound } from '../../api/round';\nimport { connect } from 'react-redux';\nimport { StoreType } from '../../store/reducer';\n\nexport interface Props {\n  isModify?: boolean;\n  roundIndex?: number;\n  onOk: Function;\n  visible: boolean;\n  onCancel: Function;\n  rounds: [];\n  roundDetails: [RoundDetails];\n  players: [Player];\n}\n\ninterface AmountMap {\n  [key: string]: any;\n  [index: number]: any;\n}\n\nclass AddRoundModal extends Component<Props> {\n  state: AmountMap = {\n    list: [{ roundNO: this.props.roundIndex || this.props.rounds.length + 1 }],\n    dateTime: '',\n    leverage: 0.1,\n    userAmount: {},\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.isModify === this.props.isModify &&\n      prevProps.roundIndex === this.props.roundIndex\n    )\n      return;\n    if (this.props.isModify && this.props.roundIndex !== undefined) {\n      const modifyData = this.props.roundDetails[this.props.roundIndex];\n      const tmp: AmountMap = {};\n      modifyData.players.forEach((player) => {\n        tmp[player.playerId] = player.amount;\n      });\n      this.setState({\n        userAmount: tmp,\n        list: [{ roundNO: this.props.roundIndex + 1 }],\n        leverage: modifyData.leverage,\n        dateTime: modifyData.date,\n      });\n    }\n  }\n\n  handleOk = () => {\n    if (this.props.isModify && this.props.roundIndex !== undefined) {\n      const info = this.props.roundDetails[this.props.roundIndex];\n      const updateDatas = {\n        id: info.id,\n        date: this.state.dateTime,\n        leverage: this.state.leverage,\n        players: Object.keys(this.state.userAmount).map((playerId) => {\n          return {\n            amount: this.state.userAmount[playerId],\n            playerId,\n          };\n        }),\n      };\n      updateRound(updateDatas)\n        .then(() => {\n          if (this.props.onOk) {\n            this.props.onOk();\n          }\n        })\n        .catch((e) => {\n          message.error(e.message);\n        });\n    } else {\n      const datas = Object.keys(this.state.userAmount).map((playerId) => {\n        return {\n          id: playerId,\n          amount: this.state.userAmount[playerId],\n        };\n      });\n      const params = {\n        date: this.state.dateTime,\n        leverage: this.state.leverage,\n        playerInfo: datas,\n      };\n      addRound(params)\n        .then(() => {\n          if (this.props.onOk) {\n            this.props.onOk();\n          }\n        })\n        .catch((e) => {\n          message.error(e.message);\n        });\n    }\n  };\n\n  handleDateTimeChange(v: moment.Moment | null) {\n    if (v) {\n      this.setState({\n        dateTime: v.format('YYYY/MM/DD'),\n      });\n    } else {\n      this.setState({\n        dateTime: '',\n      });\n    }\n  }\n\n  handleLeverageChange(v: number | undefined) {\n    this.setState({\n      leverage: v || 0.1,\n    });\n  }\n\n  handleAmountChange(v: number | undefined, player: Player) {\n    v = v ? +v : 0;\n    let tmp = {\n      ...this.state.userAmount,\n    };\n    tmp[player.id] = v;\n    this.setState({\n      userAmount: tmp,\n    });\n  }\n\n  getTableColumns() {\n    let ret = [\n      { title: '场次', key: 'roundNO', dataIndex: 'roundNO', ellipsis: true },\n      {\n        title: '日期',\n        key: 'dateTime',\n        ellipsis: true,\n        render: () => {\n          return (\n            <div style={{ width: '150px' }}>\n              <DatePicker\n                onChange={this.handleDateTimeChange}\n                format=\"YYYY/MM/DD\"\n                value={\n                  (this.state.dateTime &&\n                    moment(this.state.dateTime, 'YYYY/MM/DD')) ||\n                  undefined\n                }\n              />\n            </div>\n          );\n        },\n      },\n      {\n        title: '杠杆比例',\n        key: 'leverage',\n        ellipsis: true,\n        render: () => {\n          return (\n            <InputNumber\n              onChange={this.handleLeverageChange}\n              value={this.state.leverage}\n            />\n          );\n        },\n      },\n    ];\n    return ret.concat(\n      this.props.players.map((player: Player) => {\n        return {\n          title: player.name,\n          key: `${player.id}`,\n          ellipsis: true,\n          render: () => {\n            return (\n              <InputNumber\n                onChange={(v) => this.handleAmountChange(v, player)}\n                value={this.state.userAmount[player.id]}\n              />\n            );\n          },\n        };\n      })\n    );\n  }\n\n  handleCancel = () => {\n    this.setState({\n      list: [\n        { roundNO: this.props.rounds.length + 1 },\n      ],\n      dateTime: '',\n      leverage: 0.1,\n      userAmount: {},\n    });\n    this.props.onCancel();\n  };\n\n  render() {\n    return (\n      <Modal\n        visible={this.props.visible}\n        onCancel={this.handleCancel}\n        onOk={this.handleOk}\n        width={1200}\n      >\n        <div className=\"add-round-wrap\">\n          <Table\n            dataSource={this.state.list}\n            columns={this.getTableColumns()}\n            pagination={false}\n            scroll={{ x: true }}\n          />\n        </div>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = (store: StoreType) => {\n  return {\n    rounds: store.rounds,\n    roundDetails: store.roundDetails,\n    players: store.players,\n  };\n};\n\nexport default connect(mapStateToProps)(AddRoundModal);\n","import React, { Component } from 'react';\nimport { Modal, Table } from 'antd';\nimport { RoundDetails, Player } from '../../utils/types';\nimport { getRoundDetails } from '../../api/round';\nimport { connect } from 'react-redux';\nimport { setRoundDetails, setWinTimes } from '../../store/action';\nimport { StoreType } from '../../store/reducer';\nimport formatWinTimes from '../../utils/win-times';\n\ninterface Props {\n  onModify: OnModifyFunc;\n  visible: boolean;\n  onOk: EmptyFunc;\n  onCancel: EmptyFunc;\n  setRoundDetails: Function;\n  setWinTimes: Function;\n  players: [Player];\n  roundDetails: [RoundDetails];\n}\n\ninterface OnModifyFunc {\n  (index: number): void;\n}\n\ninterface EmptyFunc {\n  (): void;\n}\n\nclass DetailsModal extends Component<Props> {\n  componentDidMount() {\n    this.getRoundDetails();\n  }\n\n  getRoundDetails = async () => {\n    const rounds: [RoundDetails] = await getRoundDetails();\n    this.props.setRoundDetails(rounds);\n    this.props.setWinTimes(formatWinTimes(rounds));\n  };\n\n  getTableColumns() {\n    let ret: object[] = [\n      {\n        title: '场次',\n        key: 'roundNO',\n        ellipsis: true,\n        render: (text: string, record: RoundDetails, index: number) => {\n          return index + 1;\n        },\n      },\n      {\n        title: '日期',\n        key: 'dateTime',\n        ellipsis: true,\n        render: (text: string, record: RoundDetails) => {\n          return record.date;\n        },\n      },\n      {\n        title: '杠杆比例',\n        key: 'leverage',\n        ellipsis: true,\n        render: (text: string, record: RoundDetails) => {\n          return record.leverage;\n        },\n      },\n    ];\n    let players = this.props.players;\n    ret = ret.concat(\n      players.map((player) => {\n        return {\n          title: player.name,\n          key: player.id,\n          ellipsis: true,\n          render: (text: string, record: RoundDetails, index: number) => {\n            return this.getRoundInfo(player.id, index);\n          },\n        };\n      })\n    );\n    const currentUser = true;\n    if (currentUser) {\n      ret = ret.concat({\n        title: '操作',\n        key: 'opt',\n        render: (text: string, record: RoundDetails, index: number) => {\n          return (\n            <div className=\"details-opt\">\n              <span onClick={() => this.handleModifyClick(index)}>修改</span>\n            </div>\n          );\n        },\n      });\n    }\n    return ret;\n  }\n\n  handleModifyClick(index: number) {\n    this.props.onModify(index);\n  }\n\n  getRoundInfo(playerId: number, index: number) {\n    const { players } = this.props.roundDetails[index];\n    const p = players.find((info) => info.playerId === playerId);\n    return (p && p.amount) || '';\n  }\n\n  render() {\n    return (\n      <Modal\n        visible={this.props.visible}\n        onCancel={this.props.onCancel}\n        onOk={this.props.onOk}\n        width={1200}\n      >\n        <div className=\"details-round-wrap\">\n          <Table\n            dataSource={this.props.roundDetails}\n            columns={this.getTableColumns()}\n            pagination={false}\n            scroll={{ x: true }}\n          />\n        </div>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreType) => {\n  return {\n    roundDetails: state.roundDetails,\n    players: state.players,\n  };\n};\n\nconst mapDispatchToProps = {\n  setRoundDetails,\n  setWinTimes\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailsModal);\n","import React, { Component, ChangeEvent } from 'react';\nimport { Modal, Input, message } from 'antd';\nimport { addPlayer, getPlayers } from '../../api/player';\nimport { connect } from 'react-redux';\nimport { setPlayers } from '../../store/action';\n\ninterface Props {\n  visible: boolean;\n  onOk: Function;\n  onCancel: Function;\n  setPlayers: Function;\n}\n\nclass AddPlayerModal extends Component<Props> {\n  state = {\n    confirmLoading: false,\n    playerName: '',\n  };\n\n  getPlayers = async () => {\n    const players = await getPlayers();\n    this.props.setPlayers(players);\n  };\n\n  handleOk = () => {\n    if (!this.state.playerName) {\n      return message.error('请输入姓名');\n    }\n    this.setState({\n      confirmLoading: true,\n    });\n    addPlayer({\n      name: this.state.playerName,\n    })\n      .then(() => {\n        this.setState({\n          confirmLoading: false,\n        });\n        this.getPlayers();\n        if (this.props.onOk) {\n          this.props.onOk();\n        }\n      })\n      .catch((error) => {\n        this.setState({\n          confirmLoading: false,\n        });\n        error && message.error(error.message);\n      });\n  };\n\n  handleCancel = () => {\n    if (this.props.onCancel) {\n      this.props.onCancel();\n    }\n  };\n\n  handleNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      playerName: e.target.value,\n    });\n  };\n\n  render() {\n    return (\n      <Modal\n        title=\"添加选手\"\n        visible={this.props.visible}\n        onOk={this.handleOk}\n        onCancel={this.handleCancel}\n        confirmLoading={this.state.confirmLoading}\n      >\n        <div className=\"session\">\n          <div className=\"form-row\">\n            <Input\n              placeholder=\"姓名\"\n              value={this.state.playerName}\n              onChange={this.handleNameChange}\n            />\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = () => {\n  return {};\n};\n\nconst mapDispatchToProps = {\n  setPlayers,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddPlayerModal);\n","import React, { Component } from 'react';\nimport { Button } from 'antd';\nimport List from '../components/List';\nimport AddRoundModal from '../components/AddRoundModal';\nimport DetailsModal from '../components/DetailsModal';\nimport AddPlayerModal from '../components/AddPlayerModal';\nimport { connect } from 'react-redux';\nimport { StoreType } from '../store/reducer';\nimport { WinTimes } from '../utils/types';\n\ninterface AddDoneFunc {\n  (): void;\n}\n\ninterface Props {\n  onAddDone: AddDoneFunc;\n  list: [];\n  winTimes: WinTimes;\n  isAuthenticated: boolean;\n}\n\nclass Home extends Component<Props> {\n  state = {\n    showAddModal: false,\n    isModify: false,\n    showDetailsModal: false,\n    showAddPlayerModal: false,\n    modifyIndex: -1,\n  };\n\n  renderButtons() {\n    if (!this.props.isAuthenticated) {\n      return;\n    } else {\n      return (\n        <div className=\"btn-wrap\">\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              this.setState({\n                showAddPlayerModal: true,\n              });\n            }}\n          >\n            添加选手\n          </Button>\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              this.setState({\n                isModify: false,\n                showDetailsModal: true,\n              });\n            }}\n          >\n            明细\n          </Button>\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              this.setState({\n                showAddModal: true,\n              });\n            }}\n          >\n            增加记录\n          </Button>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"page home\">\n        <List list={this.props.list} winTimes={this.props.winTimes} />\n        {this.renderButtons()}\n        <AddRoundModal\n          visible={this.state.showAddModal}\n          onOk={() => {\n            this.setState({\n              showAddModal: false,\n            });\n            this.props.onAddDone();\n          }}\n          onCancel={() => {\n            this.setState({\n              showAddModal: false,\n            });\n          }}\n          isModify={this.state.isModify}\n          roundIndex={this.state.modifyIndex}\n        ></AddRoundModal>\n        <DetailsModal\n          visible={this.state.showDetailsModal}\n          onOk={() => {\n            this.setState({\n              showDetailsModal: false,\n            });\n          }}\n          onCancel={() => {\n            this.setState({\n              showDetailsModal: false,\n            });\n          }}\n          onModify={(index) => {\n            this.setState({\n              modifyIndex: index,\n              isModify: true,\n              showDetailsModal: false,\n              showAddModal: true,\n            });\n          }}\n        />\n        <AddPlayerModal\n          visible={this.state.showAddPlayerModal}\n          onOk={() => {\n            this.setState({\n              showAddPlayerModal: false,\n            });\n          }}\n          onCancel={() => {\n            this.setState({\n              showAddPlayerModal: false,\n            });\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreType) => {\n  return {\n    winTimes: state.winTimes,\n    isAuthenticated: state.isAuthenticated,\n  };\n};\n\nexport default connect(mapStateToProps)(Home);\n"],"sourceRoot":""}