{"version":3,"sources":["pages/Message/index.tsx"],"names":["IM","state","text","messageList","isJoining","client","room","scrollRef","createRef","user","AV","User","current","handleTextMessageChange","e","setState","target","value","handleTextMessageEnterChange","currentTarget","handleSend","m","TextMessage","setAttributes","senderName","getUsername","send","updateMessageList","this","Realtime","appId","appKey","server","createIMClient","then","getQuery","equalTo","find","conversations","length","createRoom","joinRoom","listenMessage","catch","console","error","createChatRoom","name","r","loadLocalMessages","messages","localStorage","getItem","JSON","parse","join","on","Event","INVITED","payload","conversation","MESSAGE","message","concat","setItem","stringify","slice","setTimeout","scrollTo","scrollHeight","attributes","className","tip","ref","map","key","id","getSenderName","moment","timestamp","format","onChange","onPressEnter","size","onClick","Component"],"mappings":"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","file":"static/js/10.b8520fe7.chunk.js","sourcesContent":["import React, { ChangeEvent, KeyboardEvent, Component, createRef } from 'react';\nimport { Input, Button, Spin } from 'antd';\nimport AV from 'leancloud-storage';\nimport {\n  Realtime,\n  IMClient,\n  PresistentConversation,\n  Event,\n  TextMessage,\n  ChatRoom,\n} from 'leancloud-realtime';\nimport moment from 'moment';\nimport './message.scss';\n\nconst HISTORY_MESSAGES_KEY = 'texasMessages';\n\ninterface AttrMap extends Object {\n  [key: string]: any;\n}\n\ninterface State {\n  text: string;\n  messageList: TextMessage[];\n  isJoining: boolean;\n}\n\nexport default class IM extends Component {\n  state: State = {\n    text: '',\n    messageList: [],\n    isJoining: false,\n  };\n\n  private client: IMClient | null = null;\n  private room: ChatRoom | null = null;\n  private scrollRef = createRef<HTMLDivElement>();\n  private user = AV.User.current();\n\n  componentDidMount() {\n    if (this.user) {\n      new Realtime({\n        appId: 'xfKlG0D6VO6MgwOUTzQ31f7W-gzGzoHsz',\n        appKey: 'k9TuwPqFQmsMqj3HYa83WCFs',\n        server: 'https://xfklg0d6.lc-cn-n1-shared.com',\n      })\n        .createIMClient(this.user)\n        .then((client) => {\n          this.client = client;\n          var query = client.getQuery().equalTo('tr', true); // 聊天室对象\n          query\n            .find()\n            .then((conversations) => {\n              if (conversations.length < 1) {\n                this.createRoom();\n              } else {\n                this.joinRoom(conversations[0]);\n              }\n            })\n            .then(() => {\n              this.listenMessage();\n            })\n            .catch(console.error);\n        });\n    }\n  }\n\n  createRoom() {\n    if (this.client) {\n      this.client\n        .createChatRoom({ name: '深挖洞，广积粮，不称王' })\n        .then((r) => {\n          this.room = r;\n          this.setState({\n            isJoining: false,\n          });\n          this.loadLocalMessages();\n        });\n    }\n  }\n\n  loadLocalMessages() {\n    let messages = localStorage.getItem(HISTORY_MESSAGES_KEY);\n    if (messages) {\n      messages = JSON.parse(messages);\n      this.setState({\n        messageList: messages\n      });\n    }\n  }\n\n  joinRoom(r: PresistentConversation) {\n    r.join().then(() => {\n      this.room = r;\n      this.setState({\n        isJoining: false,\n      });\n      this.loadLocalMessages();\n    });\n  }\n\n  handleTextMessageChange = (e: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      text: e.target.value,\n    });\n  };\n\n  handleTextMessageEnterChange = (e: KeyboardEvent<HTMLInputElement>) => {\n    this.setState({\n      text: e.currentTarget.value,\n    });\n    this.handleSend();\n  };\n\n  listenMessage() {\n    if (this.client) {\n      // 当前用户被添加至某个对话\n      this.client.on(Event.INVITED, (payload, conversation) => {\n        // console.log(payload.invitedBy, conversation.id);\n      });\n\n      // 当前用户收到了某一条消息，可以通过响应 Event.MESSAGE 这一事件来处理。\n      this.client.on(Event.MESSAGE, (message: TextMessage, conversation) => {\n        this.updateMessageList(message);\n      });\n    }\n  }\n\n  handleSend = () => {\n    if (!this.state.text) return;\n    const m = new TextMessage(this.state.text);\n    m.setAttributes({ senderName: this.user.getUsername() });\n    if (this.room) {\n      this.room.send(m);\n      this.updateMessageList(m);\n      this.setState({\n        text: '',\n      });\n    }\n  };\n\n  updateMessageList(m: TextMessage) {\n    this.setState(\n      {\n        messageList: this.state.messageList.concat(m),\n      },\n      () => {\n        localStorage.setItem(\n          HISTORY_MESSAGES_KEY,\n          JSON.stringify(this.state.messageList.slice(0, 100))\n        );\n      }\n    );\n    setTimeout(() => {\n      let current = this.scrollRef.current;\n      if (current) {\n        current.scrollTo(0, current.scrollHeight);\n      }\n    }, 100);\n  }\n\n  getSenderName(m: TextMessage) {\n    let attrs: AttrMap = m.attributes;\n    return attrs['senderName'];\n  }\n\n  render() {\n    if (!this.user) {\n      return (\n        <div className=\"message-wrap\">\n          <div>请先登录</div>\n        </div>\n      );\n    }\n\n    if (this.state.isJoining) {\n      return (\n        <div className=\"message-wrap\">\n          <Spin tip=\"正在加入聊天室...\"></Spin>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"message-wrap\">\n        <div className=\"messages\" ref={this.scrollRef}>\n          {this.state.messageList.map((m) => {\n            return (\n              <div className=\"message-item\" key={m.id}>\n                <div>\n                  <span className=\"username\">{this.getSenderName(m)}</span>\n                  <span className=\"message-time\">\n                    {moment(m.timestamp).format('YYYY/MM/DD HH:mm:ss')}\n                  </span>\n                </div>\n                <div className=\"message-content\">{m.text}</div>\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"send-wrap\">\n          <Input\n            value={this.state.text}\n            onChange={this.handleTextMessageChange}\n            onPressEnter={this.handleTextMessageEnterChange}\n          />\n          <Button size=\"large\" onClick={this.handleSend}>\n            发送\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}