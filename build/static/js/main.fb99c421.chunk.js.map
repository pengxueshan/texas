{"version":3,"sources":["api/round.ts","api/player.ts","utils/request.ts","api/user.ts","components/Session/index.tsx","components/TopBar/index.tsx","components/App/index.tsx","serviceWorker.js","index.tsx","store/context.ts"],"names":["addRound","a","params","request","url","method","data","getRounds","getRankList","getRoundDetails","updateRound","getPlayers","addPlayer","baseUrl","req","axios","baseURL","ret","status","Session","visible","useState","confirmLoading","setConfirmLoading","mobile","setMobile","password","setPassword","context","useContext","AppContext","title","onOk","login","phoneNumber","MD5","toString","toLowerCase","then","user","setShowSession","catch","error","message","onCancel","className","placeholder","value","onChange","e","target","type","TopBar","to","onClick","showSession","Home","lazy","Encrypt","App","setPlayers","list","setState","players","setRounds","rounds","isShow","setIsAuthenticated","isAuth","isAuthenticated","setRoundDetails","roundDetails","state","res","handleAddDone","this","Provider","fallback","style","display","justifyContent","alignItems","path","onAddDone","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","locale","zhCN","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","React","createContext"],"mappings":"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","file":"static/js/main.fb99c421.chunk.js","sourcesContent":["import request from '../utils/request';\n\nexport async function addRound(params: object = {}) {\n  return await request({\n    url: '/addRound',\n    method: 'post',\n    data: {\n      ...params\n    }\n  });\n}\n\nexport async function getRounds(params: object = {}) {\n  return await request({\n    url: '/rounds',\n    method: 'post',\n    data: {\n      ...params\n    }\n  });\n}\n\nexport async function getRankList(params: object = {}) {\n  return await request({\n    url: '/ranklist',\n    method: 'post',\n    data: {\n      ...params\n    }\n  });\n}\n\nexport async function getRoundDetails(params: object = {}) {\n  return await request({\n    url: '/roundDetails',\n    method: 'post',\n    data: {\n      ...params\n    }\n  });\n}\n\nexport async function updateRound(params: object = {}) {\n  return await request({\n    url: '/updateRound',\n    method: 'post',\n    data: {\n      ...params\n    }\n  });\n}","import request from '../utils/request';\n\nexport async function getPlayers(params: object = {}) {\n  return await request({\n    url: '/players',\n    method: 'post',\n    data: {\n      ...params\n    }\n  });\n}\n\nexport async function addPlayer(params: object = {}) {\n  return await request({\n    url: '/addPlayer',\n    method: 'post',\n    data: {\n      ...params\n    }\n  });\n}","import axios from 'axios';\n\nlet baseUrl: string = 'http://106.55.15.36:7001/';\n\nexport default async function request(req: object) {\n  let ret = await axios({\n    baseURL: baseUrl,\n    ...req,\n  });\n  const { status, data } = ret;\n  if (status === 200) {\n    return data.data;\n  }\n}\n","import request from '../utils/request';\n\nexport async function login(params: object = {}) {\n  return await request({\n    url: '/login',\n    method: 'post',\n    data: {\n      ...params\n    }\n  });\n}","import React, { useState, ChangeEvent, useContext, useRef } from 'react';\nimport { Modal, Input, Button, message } from 'antd';\nimport './session.scss';\nimport AppContext from '../../store/context';\nimport { MD5 } from 'crypto-js';\nimport { login } from '../../api/user';\n\ninterface Props {\n  visible: boolean;\n}\n\nexport default function Session({ visible }: Props) {\n  const [confirmLoading, setConfirmLoading] = useState(false);\n  const [mobile, setMobile] = useState('');\n  const [password, setPassword] = useState('');\n  // const [verifyCode, setVerifyCode] = useState('');\n  // const [verifyCount, setVerifyCount] = useState(0);\n  // const countRef = useRef(verifyCount);\n  // countRef.current = verifyCount;\n  const [inviteCode, setInviteCodeChange] = useState('');\n  const context = useContext(AppContext);\n\n  function handleOk() {\n    if (!mobile) {\n      return message.error('请输入手机号');\n    }\n    if (!password) {\n      return message.error('请输入密码');\n    }\n    // if (!verifyCode) {\n    //   return message.error('请输入验证码');\n    // }\n    // if (!inviteCode) {\n    //   return message.error('请输入邀请码');\n    // }\n    // if (MD5(inviteCode).toString() !== '41b9df4a217bb3c10b1c339358111b0d') {\n    //   return message.error('邀请码错误');\n    // }\n    setConfirmLoading(true);\n    login({\n      phoneNumber: `+86${mobile}`,\n      password: MD5(password).toString().toLowerCase(),\n    })\n      .then((user) => {\n        setConfirmLoading(false);\n        context.setShowSession(false);\n      })\n      .catch((error) => {\n        setConfirmLoading(false);\n        error && message.error(error.message);\n      });\n  }\n\n  function handleCancel() {\n    context.setShowSession(false);\n  }\n\n  function handleMobileChange(e: ChangeEvent<HTMLInputElement>) {\n    setMobile(e.target.value);\n  }\n\n  function handlePasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    setPassword(e.target.value);\n  }\n\n  // function handleVerifyCodeChange(e: ChangeEvent<HTMLInputElement>) {\n  //   setVerifyCode(e.target.value);\n  // }\n\n  // function getButtonText() {\n  //   if (verifyCount <= 0) {\n  //     return '获取验证码';\n  //   } else {\n  //     return `${verifyCount}s`;\n  //   }\n  // }\n\n  // function handleVerifyClick() {\n  //   if (verifyCount > 0 || !mobile) return;\n  //   AV.Cloud.requestSmsCode(`+86${mobile}`).then(() => {\n  //     setVerifyCount(60);\n  //     startCount();\n  //   });\n  // }\n\n  // function startCount() {\n  //   setTimeout(countDown, 1000);\n  // }\n\n  // function countDown() {\n  //   if (countRef.current <= 0) return;\n  //   setVerifyCount(countRef.current - 1);\n  //   setTimeout(countDown, 1000);\n  // }\n\n  function handleInviteChange(e: ChangeEvent<HTMLInputElement>) {\n    setInviteCodeChange(e.target.value);\n  }\n\n  return (\n    <Modal\n      title=\"登录\"\n      visible={visible}\n      onOk={handleOk}\n      onCancel={handleCancel}\n      confirmLoading={confirmLoading}\n    >\n      <div className=\"session\">\n        <div className=\"form-row\">\n          <Input\n            placeholder=\"手机号码\"\n            value={mobile}\n            onChange={handleMobileChange}\n          />\n        </div>\n        <div className=\"form-row\">\n          <Input\n            placeholder=\"密码\"\n            value={password}\n            onChange={handlePasswordChange}\n            type=\"password\"\n          />\n        </div>\n        {/* <div className=\"form-row\">\n          <Input\n            placeholder=\"验证码\"\n            value={verifyCode}\n            onChange={handleVerifyCodeChange}\n          />\n          <Button disabled={verifyCount > 0} onClick={handleVerifyClick}>\n            {getButtonText()}\n          </Button>\n        </div> */}\n        {/* <div className=\"form-row\">\n          <Input\n            placeholder=\"邀请码\"\n            value={inviteCode}\n            onChange={handleInviteChange}\n          />\n        </div> */}\n      </div>\n    </Modal>\n  );\n}\n","import React, { useContext } from 'react';\nimport './top-bar.scss';\nimport Session from '../Session';\nimport AppContext from '../../store/context';\nimport { Modal, Avatar } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { UserOutlined } from '@ant-design/icons';\n\nexport default function TopBar() {\n  const context = useContext(AppContext);\n\n  function handleSigninClick() {\n    context.setShowSession(true);\n  }\n\n  function handleSignoutClick() {\n    Modal.confirm({\n      title: '确定退出登录吗？',\n      onOk() {\n        // return AV.User.logOut().then(() => {\n        //   window.location.href = '/';\n        // });\n      },\n    });\n  }\n\n  let avatar = '';\n  let currentUser = '';\n\n  const renderAvatar = () => {\n    return (\n      <Link key=\"setting\" to=\"/profile\">\n        {avatar ? (\n          <Avatar size={32} src={avatar} />\n        ) : (\n          <Avatar size={32} icon={<UserOutlined />} />\n        )}\n      </Link>\n    );\n  };\n\n  return (\n    <div className=\"top-bar\">\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">排行榜</Link>\n          </li>\n          {/* <li>\n            <Link to=\"/photo\">精彩瞬间</Link>\n          </li>\n          <li>\n            <Link to=\"/message\">聊天室</Link>\n          </li> */}\n        </ul>\n      </nav>\n      <div className=\"user-section\">\n        {!currentUser ? (\n          <span className=\"link-style\" onClick={handleSigninClick}>\n            登录\n          </span>\n        ) : (\n          [\n            renderAvatar(),\n            <span\n              key=\"logout\"\n              className=\"link-style\"\n              onClick={handleSignoutClick}\n            >\n              退出登录\n            </span>,\n          ]\n        )}\n        <Session visible={context.showSession} />\n      </div>\n    </div>\n  );\n}\n","import React, { Component, lazy, Suspense } from 'react';\nimport AppContext, { ContextType } from '../../store/context';\nimport TopBar from '../TopBar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport PrivateRoute from '../PrivateRoute';\nimport { Spin } from 'antd';\n\nimport { Player, Round, RankListData, RoundDetails } from '../../utils/types';\nimport { getPlayers } from '../../api/player';\nimport { getRankList, getRounds, getRoundDetails } from '../../api/round';\n\nimport './app.scss';\nimport 'antd/dist/antd.css';\n\n// const Message = lazy(() => import('../../pages/Message'));\n// const Profile = lazy(() => import('../../pages/Profile'));\n// const Auth = lazy(() => import('../../pages/Auth'));\nconst Home = lazy(() => import('../../pages/Home'));\n// const Photo = lazy(() => import('../../pages/Photo'));\nconst Encrypt = lazy(() => import('../../pages/Encrypt'));\n\ninterface State extends ContextType {\n  list: [];\n}\n\ninterface Map {\n  [key: string]: RankListData;\n}\n\nexport default class App extends Component {\n  setPlayers = (list: Player[]) => {\n    this.setState({\n      players: list,\n    });\n  };\n\n  setRounds = (list: Round[]) => {\n    this.setState({\n      rounds: list,\n    });\n  };\n\n  setShowSession = (isShow?: boolean) => {\n    this.setState({\n      showSession: !!isShow,\n    });\n  };\n\n  setIsAuthenticated = (isAuth: boolean) => {\n    this.setState({\n      isAuthenticated: isAuth,\n    });\n  };\n\n  getPlayers = async () => {\n    const players = await getPlayers();\n    this.setPlayers(players);\n  };\n\n  getRounds = async () => {\n    const rounds = await getRounds();\n    this.setRounds(rounds);\n  };\n\n  getRoundDetails = async () => {\n    const rounds = await getRoundDetails();\n    this.setRoundDetails(rounds);\n  };\n\n  setRoundDetails = (list: RoundDetails) => {\n    this.setState({\n      roundDetails: list,\n    });\n  };\n\n  state: State = {\n    players: [],\n    rounds: [],\n    roundDetails: [],\n    showSession: false,\n    isAuthenticated: false,\n    setPlayers: this.setPlayers,\n    setRounds: this.setRounds,\n    setRoundDetails: this.setRoundDetails,\n    setShowSession: this.setShowSession,\n    setIsAuthenticated: this.setIsAuthenticated,\n    getPlayers: this.getPlayers,\n    getRounds: this.getRounds,\n\n    list: [],\n  };\n\n  componentDidMount() {\n    this.getPlayers();\n    this.getRounds();\n    this.getRankList();\n  }\n\n  getRankList = () => {\n    getRankList().then((res) => {\n      this.setState({\n        list: res,\n      });\n    });\n  };\n\n  handleAddDone = () => {\n    this.getRankList();\n    this.getRounds();\n    this.getRoundDetails();\n  };\n\n  render() {\n    let {\n      players,\n      rounds,\n      roundDetails,\n      showSession,\n      setPlayers,\n      setRounds,\n      setRoundDetails,\n      setShowSession,\n      list,\n      isAuthenticated,\n      setIsAuthenticated,\n      getPlayers,\n      getRounds,\n    } = this.state;\n    const isDev = process.env.NODE_ENV === 'development';\n    return (\n      <div className=\"app\">\n        <AppContext.Provider\n          value={{\n            players,\n            rounds,\n            roundDetails,\n            showSession,\n            setPlayers,\n            setRounds,\n            setRoundDetails,\n            setShowSession,\n            isAuthenticated,\n            setIsAuthenticated,\n            getPlayers,\n            getRounds,\n          }}\n        >\n          <Router>\n            {isAuthenticated || isDev ? <TopBar /> : null}\n            <Suspense\n              fallback={\n                <div\n                  style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                  }}\n                >\n                  <Spin />\n                </div>\n              }\n            >\n              <Switch>\n                {/* <PrivateRoute path=\"/photo\">\n                  <Photo />\n                </PrivateRoute>\n                <PrivateRoute path=\"/message\">\n                  <Message />\n                </PrivateRoute>\n                <PrivateRoute path=\"/profile\">\n                  <Profile />\n                </PrivateRoute> */}\n                <Route path=\"/encrypt\">\n                  <Encrypt />\n                </Route>\n                {/* <Route path=\"/auth\">\n                  <Auth />\n                </Route> */}\n                {/* <PrivateRoute path=\"/\">\n                  <Home list={list} onAddDone={this.handleAddDone} />\n                </PrivateRoute> */}\n                <Route path=\"/\">\n                  <Home list={list} onAddDone={this.handleAddDone} />\n                </Route>\n              </Switch>\n            </Suspense>\n          </Router>\n        </AppContext.Provider>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport zhCN from 'antd/es/locale/zh_CN';\nimport { ConfigProvider } from 'antd';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConfigProvider locale={zhCN}>\n      <App />\n    </ConfigProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Player, Round, RoundDetails } from '../utils/types';\n\nexport interface ContextType {\n  players: Player[];\n  rounds: Round[];\n  roundDetails: RoundDetails[];\n  showSession: boolean;\n  setPlayers: Function;\n  setRounds: Function;\n  setShowSession: Function;\n  isAuthenticated: boolean;\n  setIsAuthenticated: Function;\n  getPlayers: Function;\n  getRounds: Function;\n  setRoundDetails: Function;\n}\n\nexport const defaultContext: ContextType = {\n  players: [],\n  rounds: [],\n  roundDetails: [],\n  showSession: false,\n  setPlayers: () => {},\n  setRounds: () => {},\n  setShowSession: () => {},\n  isAuthenticated: false,\n  setIsAuthenticated: () => {},\n  getPlayers: () => {},\n  getRounds: () => {},\n  setRoundDetails: () => {},\n};\n\nexport default React.createContext(defaultContext);\n"],"sourceRoot":""}