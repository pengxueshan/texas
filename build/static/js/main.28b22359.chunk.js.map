{"version":3,"sources":["api/player.ts","utils/win-times.ts","utils/request.ts","components/Session/index.tsx","components/TopBar/index.tsx","components/App/index.tsx","serviceWorker.js","store/reducer.ts","store/index.ts","index.tsx","api/round.ts","store/action.ts"],"names":["getPlayers","a","params","request","url","method","data","addPlayer","formatWinTimes","rounds","times","forEach","round","players","player","amount","undefined","playerId","req","axios","baseURL","ret","status","AUTH_NAMES","Session","state","name","password","handleOk","includes","props","setIsAuthenticated","setShowSession","message","error","handleCancel","handleNameChange","e","setState","target","value","handlePasswordChange","visible","this","title","onOk","onCancel","className","placeholder","onChange","Component","mapDispatchToProps","connect","showSession","TopBar","handleSigninClick","isAuthenticated","to","onClick","Home","lazy","Encrypt","App","list","setPlayers","getRounds","setRounds","getRoundDetails","setRoundDetails","setWinTimes","getRankList","then","res","handleAddDone","fallback","style","display","justifyContent","alignItems","path","onAddDone","setIsMobile","Boolean","window","location","hostname","match","combineReducers","userInfo","action","type","types","SET_USER_INFO","payload","SET_PLAYERS","SET_ROUNDS","roundDetails","SET_ROUND_DETAILS","SET_SHOW_SESSION","SET_IS_AUTHENTICATED","winTimes","SET_WIN_TIMES","isMobile","SET_IS_MOBILE","createStore","reducer","ReactDOM","render","locale","zhCN","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","addRound","updateRound"],"mappings":"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","file":"static/js/main.28b22359.chunk.js","sourcesContent":["import request from '../utils/request';\n\nexport async function getPlayers(params: object = {}) {\n  return await request({\n    url: '/players',\n    method: 'post',\n    data: {\n      ...params\n    }\n  });\n}\n\nexport async function addPlayer(params: object = {}) {\n  return await request({\n    url: '/addPlayer',\n    method: 'post',\n    data: {\n      ...params\n    }\n  });\n}","import { RoundDetails } from './types';\n\ninterface Times {\n  [index: number]: number;\n}\n\nexport default function formatWinTimes(rounds: [RoundDetails]) {\n  const times: Times = {};\n  rounds.forEach((round) => {\n    round.players.forEach((player) => {\n      if (player.amount > 0) {\n        if (times[player.playerId] === undefined) {\n          times[player.playerId] = 0;\n        }\n        times[player.playerId] += 1;\n      }\n    });\n  });\n  return times;\n}","import axios from 'axios';\n\nlet baseUrl: string = '/api';\n\nif (process.env.NODE_ENV === 'development') {\n  baseUrl = 'http://127.0.0.1:7001';\n}\n\nexport default async function request(req: object) {\n  let ret = await axios({\n    baseURL: baseUrl,\n    ...req,\n  });\n  const { status, data } = ret;\n  if (status === 200) {\n    return data.data;\n  }\n}\n","import React, { Component, ChangeEvent } from 'react';\nimport { Modal, Input, Button, message } from 'antd';\nimport './session.scss';\nimport { MD5 } from 'crypto-js';\nimport { connect } from 'react-redux';\nimport { StoreType } from '../../store/reducer';\nimport { setShowSession, setIsAuthenticated } from '../../store/action';\n\ninterface Props {\n  visible: boolean;\n  setShowSession: Function;\n  setIsAuthenticated: Function;\n}\n\nconst AUTH_NAMES = ['hexiuling'];\nconst AUTH_PASSWORD = 'black sheep on the wall';\n\nclass Session extends Component<Props> {\n  state = {\n    name: '',\n    password: '',\n  };\n\n  handleOk = () => {\n    const { name, password } = this.state;\n    if (!name) {\n      return message.error('请输入壮士姓名');\n    }\n    if (!password) {\n      return message.error('请输入暗号');\n    }\n    if (!AUTH_NAMES.includes(name) || password !== AUTH_PASSWORD) {\n      return message.error('子非鱼焉知鱼之乐');\n    }\n    this.props.setIsAuthenticated(true);\n    this.props.setShowSession(false);\n  };\n\n  handleCancel = () => {\n    this.props.setShowSession(false);\n  };\n\n  handleNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      name: e.target.value,\n    });\n  };\n\n  handlePasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      password: e.target.value,\n    });\n  };\n\n  render() {\n    const { visible } = this.props;\n    const { name, password } = this.state;\n    return (\n      <Modal\n        title=\"登录\"\n        visible={visible}\n        onOk={this.handleOk}\n        onCancel={this.handleCancel}\n      >\n        <div className=\"session\">\n          <div className=\"form-row\">\n            <Input\n              placeholder=\"敢问壮士姓名\"\n              value={name}\n              onChange={this.handleNameChange}\n            />\n          </div>\n          <div className=\"form-row\">\n            <Input\n              placeholder=\"请对暗号\"\n              value={password}\n              onChange={this.handlePasswordChange}\n            />\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreType) => {\n  return {\n    visible: state.showSession,\n  };\n};\n\nconst mapDispatchToProps = {\n  setShowSession,\n  setIsAuthenticated,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Session);\n","import React, { Component } from 'react';\nimport Session from '../Session';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { StoreType } from '../../store/reducer';\nimport { setShowSession } from '../../store/action';\nimport './top-bar.scss';\n\ninterface Props {\n  isAuthenticated: boolean;\n  setShowSession: Function;\n}\n\nclass TopBar extends Component<Props> {\n  handleSigninClick = () => {\n    this.props.setShowSession(true);\n  };\n\n  render() {\n    const { isAuthenticated } = this.props;\n    return (\n      <div className=\"top-bar\">\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">排行榜</Link>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"user-section\">\n          {!isAuthenticated ? (\n            <span className=\"link-style\" onClick={this.handleSigninClick}>\n              登录\n            </span>\n          ) : (\n            <span>芝麻开门了</span>\n          )}\n          <Session />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreType) => {\n  return {\n    isAuthenticated: state.isAuthenticated,\n  };\n};\n\nconst mapDispatchToProps = {\n  setShowSession,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopBar);\n","import React, { Component, lazy, Suspense } from 'react';\nimport TopBar from '../TopBar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport PrivateRoute from '../PrivateRoute';\nimport { Spin } from 'antd';\nimport { connect } from 'react-redux';\n\nimport { RoundDetails } from '../../utils/types';\nimport { getPlayers } from '../../api/player';\nimport { getRankList, getRounds, getRoundDetails } from '../../api/round';\nimport {\n  setPlayers,\n  setRounds,\n  setRoundDetails,\n  setWinTimes,\n  setIsMobile,\n} from '../../store/action';\nimport formatWinTimes from '../../utils/win-times';\nimport './app.scss';\nimport 'antd/dist/antd.css';\n\n// const Message = lazy(() => import('../../pages/Message'));\n// const Profile = lazy(() => import('../../pages/Profile'));\n// const Auth = lazy(() => import('../../pages/Auth'));\nconst Home = lazy(() => import('../../pages/Home'));\n// const Photo = lazy(() => import('../../pages/Photo'));\nconst Encrypt = lazy(() => import('../../pages/Encrypt'));\n\ninterface State {\n  list: [];\n}\n\ninterface Props {\n  setPlayers: Function;\n  setRounds: Function;\n  setRoundDetails: Function;\n  setWinTimes: Function;\n  setIsMobile: Function;\n}\n\nclass App extends Component<Props> {\n  state: State = {\n    list: [],\n  };\n\n  getPlayers = async () => {\n    const players = await getPlayers();\n    this.props.setPlayers(players);\n  };\n\n  getRounds = async () => {\n    const rounds = await getRounds();\n    this.props.setRounds(rounds);\n  };\n\n  getRoundDetails = async () => {\n    const rounds: [RoundDetails] = await getRoundDetails();\n    this.props.setRoundDetails(rounds);\n    const times = formatWinTimes(rounds);\n    this.props.setWinTimes(times);\n  };\n\n  componentDidMount() {\n    this.getPlayers();\n    this.getRounds();\n    this.getRankList();\n  }\n\n  getRankList = () => {\n    getRankList().then((res) => {\n      this.setState({\n        list: res,\n      });\n    });\n  };\n\n  handleAddDone = () => {\n    this.getRankList();\n    this.getRounds();\n    this.getRoundDetails();\n  };\n\n  render() {\n    let { list } = this.state;\n    const isDev = process.env.NODE_ENV === 'development';\n    return (\n      <div className=\"app\">\n        <Router>\n          <TopBar />\n          <Suspense\n            fallback={\n              <div\n                style={{\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                }}\n              >\n                <Spin />\n              </div>\n            }\n          >\n            <Switch>\n              {/* <PrivateRoute path=\"/photo\">\n                  <Photo />\n                </PrivateRoute>\n                <PrivateRoute path=\"/message\">\n                  <Message />\n                </PrivateRoute>\n                <PrivateRoute path=\"/profile\">\n                  <Profile />\n                </PrivateRoute> */}\n              <Route path=\"/encrypt\">\n                <Encrypt />\n              </Route>\n              {/* <Route path=\"/auth\">\n                  <Auth />\n                </Route> */}\n              {/* <PrivateRoute path=\"/\">\n                  <Home list={list} onAddDone={this.handleAddDone} />\n                </PrivateRoute> */}\n              <Route path=\"/\">\n                <Home list={list} onAddDone={this.handleAddDone} />\n              </Route>\n            </Switch>\n          </Suspense>\n        </Router>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = () => {\n  return {};\n};\n\nconst mapDispatchToProps = {\n  setPlayers,\n  setRounds,\n  setRoundDetails,\n  setWinTimes,\n  setIsMobile,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { types } from './action';\nimport { combineReducers } from 'redux';\nimport { Player, RoundDetails, WinTimes } from '../utils/types';\n\nexport interface Action {\n  type: string;\n  payload: any;\n}\n\nexport interface StoreType {\n  userInfo: object | null;\n  players: [Player];\n  rounds: [];\n  roundDetails: [RoundDetails];\n  showSession: boolean;\n  isAuthenticated: boolean;\n  winTimes: WinTimes;\n}\n\nfunction userInfo(state = null, action: Action) {\n  switch (action.type) {\n    case types.SET_USER_INFO:\n      state = action.payload.userInfo;\n      return state;\n    default:\n      return state;\n  }\n}\n\nfunction players(state = [], action: Action) {\n  switch (action.type) {\n    case types.SET_PLAYERS:\n      state = action.payload.players;\n      return state;\n    default:\n      return state;\n  }\n}\n\nfunction rounds(state = [], action: Action) {\n  switch (action.type) {\n    case types.SET_ROUNDS:\n      state = action.payload.rounds;\n      return state;\n    default:\n      return state;\n  }\n}\n\nfunction roundDetails(state = [], action: Action) {\n  switch (action.type) {\n    case types.SET_ROUND_DETAILS:\n      state = action.payload.roundDetails;\n      return state;\n    default:\n      return state;\n  }\n}\n\nfunction winTimes(state = {}, action: Action) {\n  switch (action.type) {\n    case types.SET_WIN_TIMES:\n      state = action.payload.winTimes;\n      return state;\n    default:\n      return state;\n  }\n}\n\nfunction showSession(state = false, action: Action) {\n  switch (action.type) {\n    case types.SET_SHOW_SESSION:\n      state = action.payload.showSession;\n      return state;\n    default:\n      return state;\n  }\n}\n\nfunction isAuthenticated(state = false, action: Action) {\n  switch (action.type) {\n    case types.SET_IS_AUTHENTICATED:\n      state = action.payload.isAuthenticated;\n      return state;\n    default:\n      return state;\n  }\n}\n\nfunction isMobile(state = false, action: Action) {\n  switch (action.type) {\n    case types.SET_IS_MOBILE:\n      state = action.payload.isMobile;\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({ userInfo, players, rounds, roundDetails, showSession, isAuthenticated, winTimes, isMobile });\n","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport default createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport zhCN from 'antd/es/locale/zh_CN';\nimport { ConfigProvider } from 'antd';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <ConfigProvider locale={zhCN}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </ConfigProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import request from '../utils/request';\n\nexport async function addRound(params: object = {}) {\n  return await request({\n    url: '/addRound',\n    method: 'post',\n    data: {\n      ...params\n    }\n  });\n}\n\nexport async function getRounds(params: object = {}) {\n  return await request({\n    url: '/rounds',\n    method: 'post',\n    data: {\n      ...params\n    }\n  });\n}\n\nexport async function getRankList(params: object = {}) {\n  return await request({\n    url: '/ranklist',\n    method: 'post',\n    data: {\n      ...params\n    }\n  });\n}\n\nexport async function getRoundDetails(params: object = {}) {\n  return await request({\n    url: '/roundDetails',\n    method: 'post',\n    data: {\n      ...params\n    }\n  });\n}\n\nexport async function updateRound(params: object = {}) {\n  return await request({\n    url: '/updateRound',\n    method: 'post',\n    data: {\n      ...params\n    }\n  });\n}","const SET_USER_INFO = 'SET_USER_INFO';\nconst SET_PLAYERS = 'SET_PLAYERS';\nconst SET_ROUNDS = 'SET_ROUNDS';\nconst SET_SHOW_SESSION = 'SET_SHOW_SESSION';\nconst SET_IS_AUTHENTICATED = 'SET_IS_AUTHENTICATED';\nconst SET_ROUND_DETAILS = 'SET_ROUND_DETAILS';\nconst SET_WIN_TIMES = 'SET_WIN_TIMES';\nconst SET_IS_MOBILE = 'SET_IS_MOBILE';\n\nexport interface UserInfo {\n  id: number\n}\n\nexport function setUserInfo(userInfo: UserInfo) {\n  return {\n    type: SET_USER_INFO,\n    payload: {\n      userInfo,\n    },\n  };\n}\n\nexport function setPlayers(players: []) {\n  return {\n    type: SET_PLAYERS,\n    payload: {\n      players,\n    },\n  };\n}\n\nexport function setRounds(rounds: []) {\n  return {\n    type: SET_ROUNDS,\n    payload: {\n      rounds,\n    },\n  };\n}\n\nexport function setRoundDetails(roundDetails: object) {\n  return {\n    type: SET_ROUND_DETAILS,\n    payload: {\n      roundDetails,\n    },\n  };\n}\n\nexport function setWinTimes(winTimes: object) {\n  return {\n    type: SET_WIN_TIMES,\n    payload: {\n      winTimes,\n    },\n  };\n}\n\nexport function setShowSession(showSession: boolean) {\n  return {\n    type: SET_SHOW_SESSION,\n    payload: {\n      showSession,\n    },\n  };\n}\n\nexport function setIsAuthenticated(isAuthenticated: boolean) {\n  return {\n    type: SET_IS_AUTHENTICATED,\n    payload: {\n      isAuthenticated,\n    },\n  };\n}\n\nexport function setIsMobile(isMobile: boolean) {\n  return {\n    type: SET_IS_MOBILE,\n    payload: {\n      isMobile,\n    },\n  };\n}\n\nexport const types = {\n  SET_USER_INFO,\n  SET_PLAYERS,\n  SET_ROUNDS,\n  SET_SHOW_SESSION,\n  SET_IS_AUTHENTICATED,\n  SET_ROUND_DETAILS,\n  SET_WIN_TIMES,\n  SET_IS_MOBILE\n};\n"],"sourceRoot":""}