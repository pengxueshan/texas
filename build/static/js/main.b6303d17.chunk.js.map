{"version":3,"sources":["store/context.ts","components/Session/index.tsx","components/TopBar/index.tsx","components/PrivateRoute/index.tsx","components/App/index.tsx","serviceWorker.js","index.tsx"],"names":["React","createContext","users","rounds","roundUserInfo","showSession","setUsers","setRounds","setRoundUserInfo","setShowSession","isAuthenticated","setIsAuthenticated","Session","visible","useState","confirmLoading","setConfirmLoading","mobile","setMobile","verifyCode","setVerifyCode","verifyCount","setVerifyCount","countRef","useRef","current","inviteCode","setInviteCodeChange","context","useContext","AppContext","countDown","setTimeout","title","onOk","MD5","toString","message","error","AV","User","signUpOrlogInWithMobilePhone","then","user","onCancel","className","placeholder","value","onChange","e","target","disabled","onClick","Cloud","requestSmsCode","TopBar","avatar","currentUser","get","to","key","size","src","icon","UserOutlined","Modal","confirm","logOut","window","location","href","PrivateRoute","children","rest","render","pathname","state","from","Message","lazy","Profile","Auth","Home","Photo","Encrypt","App","list","setState","calcList","isShow","isAuth","getUsers","Query","find","players","getAllRounds","res","Promise","all","map","round","getRoundInfo","roundInfos","query","equalTo","handleAddDone","this","tmp","forEach","index","leverage","info","player","amount","playerId","userRoundInfo","max","min","total","totalBalance","count","currentLeverage","Big","plus","valueOf","times","_","values","sort","a","b","Provider","fallback","style","display","justifyContent","alignItems","path","onAddDone","Component","Boolean","hostname","match","init","appId","appKey","serverURL","ReactDOM","StrictMode","locale","zhCN","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b6303d17.chunk.js","sourcesContent":["import React from 'react';\nimport AV from 'leancloud-storage';\n\nexport interface ContextType {\n  users: AV.Object[];\n  rounds: AV.Object[];\n  roundUserInfo: AV.Object[][];\n  showSession: boolean;\n  setUsers: Function;\n  setRounds: Function;\n  setRoundUserInfo: Function;\n  setShowSession: Function;\n  isAuthenticated: boolean;\n  setIsAuthenticated: Function;\n}\n\nexport const defaultContext: ContextType = {\n  users: [],\n  rounds: [],\n  roundUserInfo: [],\n  showSession: false,\n  setUsers: () => { },\n  setRounds: () => { },\n  setRoundUserInfo: () => { },\n  setShowSession: () => { },\n  isAuthenticated: false,\n  setIsAuthenticated: () => { }\n};\n\nexport default React.createContext(defaultContext);\n","import React, { useState, ChangeEvent, useContext, useRef } from 'react';\nimport { Modal, Input, Button, message } from 'antd';\nimport './session.scss';\nimport AV from 'leancloud-storage';\nimport AppContext from '../../store/context';\nimport { MD5 } from 'crypto-js';\n\ninterface Props {\n  visible: boolean;\n}\n\nexport default function Session({ visible }: Props) {\n  const [confirmLoading, setConfirmLoading] = useState(false);\n  const [mobile, setMobile] = useState('');\n  const [verifyCode, setVerifyCode] = useState('');\n  const [verifyCount, setVerifyCount] = useState(0);\n  const countRef = useRef(verifyCount);\n  countRef.current = verifyCount;\n  const [inviteCode, setInviteCodeChange] = useState('');\n  const context = useContext(AppContext);\n\n  function handleOk() {\n    if (!mobile) {\n      return message.error('请输入手机号');\n    }\n    if (!verifyCode) {\n      return message.error('请输入验证码');\n    }\n    if (!inviteCode) {\n      return message.error('请输入邀请码');\n    }\n    if (MD5(inviteCode).toString() !== '41b9df4a217bb3c10b1c339358111b0d') {\n      return message.error('邀请码错误');\n    }\n    setConfirmLoading(true);\n    AV.User.signUpOrlogInWithMobilePhone(`+86${mobile}`, verifyCode).then(\n      (user) => {\n        setConfirmLoading(false);\n        context.setShowSession(false);\n      },\n      (error) => {\n        setConfirmLoading(false);\n        message.error(error.message);\n      }\n    );\n  }\n\n  function handleCancel() {\n    context.setShowSession(false);\n  }\n\n  function handleMobileChange(e: ChangeEvent<HTMLInputElement>) {\n    setMobile(e.target.value);\n  }\n\n  function handleVerifyCodeChange(e: ChangeEvent<HTMLInputElement>) {\n    setVerifyCode(e.target.value);\n  }\n\n  function getButtonText() {\n    if (verifyCount <= 0) {\n      return '获取验证码';\n    } else {\n      return `${verifyCount}s`;\n    }\n  }\n\n  function handleVerifyClick() {\n    if (verifyCount > 0 || !mobile) return;\n    AV.Cloud.requestSmsCode(`+86${mobile}`).then(() => {\n      setVerifyCount(60);\n      startCount();\n    });\n  }\n\n  function startCount() {\n    setTimeout(countDown, 1000);\n  }\n\n  function countDown() {\n    if (countRef.current <= 0) return;\n    setVerifyCount(countRef.current - 1);\n    setTimeout(countDown, 1000);\n  }\n\n  function handleInviteChange(e: ChangeEvent<HTMLInputElement>) {\n    setInviteCodeChange(e.target.value);\n  }\n\n  return (\n    <Modal\n      title=\"登录或注册\"\n      visible={visible}\n      onOk={handleOk}\n      onCancel={handleCancel}\n      confirmLoading={confirmLoading}\n    >\n      <div className=\"session\">\n        <div className=\"form-row\">\n          <Input\n            placeholder=\"手机号码\"\n            value={mobile}\n            onChange={handleMobileChange}\n          />\n        </div>\n        <div className=\"form-row\">\n          <Input\n            placeholder=\"验证码\"\n            value={verifyCode}\n            onChange={handleVerifyCodeChange}\n          />\n          <Button disabled={verifyCount > 0} onClick={handleVerifyClick}>\n            {getButtonText()}\n          </Button>\n        </div>\n        <div className=\"form-row\">\n          <Input\n            placeholder=\"邀请码\"\n            value={inviteCode}\n            onChange={handleInviteChange}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n}\n","import React, { useContext } from 'react';\nimport './top-bar.scss';\nimport Session from '../Session';\nimport AppContext from '../../store/context';\nimport AV from 'leancloud-storage';\nimport { Modal, Avatar } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { UserOutlined } from '@ant-design/icons';\n\nexport default function TopBar() {\n  const context = useContext(AppContext);\n\n  function handleSigninClick() {\n    context.setShowSession(true);\n  }\n\n  function handleSignoutClick() {\n    Modal.confirm({\n      title: '确定退出登录吗？',\n      onOk() {\n        return AV.User.logOut().then(() => {\n          window.location.href = '/';\n        });\n      },\n    });\n  }\n\n  const currentUser = AV.User.current();\n  let avatar: AV.Object;\n  if (currentUser) {\n    avatar = currentUser.get('avatar');\n  }\n\n  const renderAvatar = () => {\n    return (\n      <Link key=\"setting\" to=\"/profile\">\n        {avatar ? (\n          <Avatar size={32} src={avatar.get('url')} />\n        ) : (\n          <Avatar size={32} icon={<UserOutlined />} />\n        )}\n      </Link>\n    );\n  };\n\n  return (\n    <div className=\"top-bar\">\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">排行榜</Link>\n          </li>\n          <li>\n            <Link to=\"/photo\">精彩瞬间</Link>\n          </li>\n          <li>\n            <Link to=\"/message\">聊天室</Link>\n          </li>\n        </ul>\n      </nav>\n      <div className=\"user-section\">\n        {!currentUser ? (\n          <span className=\"link-style\" onClick={handleSigninClick}>\n            登录\n          </span>\n        ) : (\n          [\n            renderAvatar(),\n            <span\n              key=\"logout\"\n              className=\"link-style\"\n              onClick={handleSignoutClick}\n            >\n              退出登录\n            </span>,\n          ]\n        )}\n        <Session visible={context.showSession} />\n      </div>\n    </div>\n  );\n}\n","import React, { useContext } from 'react';\nimport { Route, Redirect, RouteProps } from 'react-router-dom';\nimport AppContext from '../../store/context';\n\ninterface Props extends RouteProps {\n  children: any;\n}\n\nexport default function PrivateRoute({ children, ...rest }: Props) {\n  const context = useContext(AppContext);\n  const isDev = process.env.NODE_ENV === 'development';\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        isDev || context.isAuthenticated ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/auth',\n              state: { from: location },\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n","import React, { Component, lazy, Suspense } from 'react';\nimport AppContext, { ContextType } from '../../store/context';\nimport AV from 'leancloud-storage';\nimport _ from 'lodash';\nimport Big from 'big.js';\nimport { ListItem } from '../List';\nimport TopBar from '../TopBar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport PrivateRoute from '../PrivateRoute';\nimport { Spin } from 'antd';\n\nimport './app.scss';\nimport 'antd/dist/antd.css';\n\nconst Message = lazy(() => import('../../pages/Message'));\nconst Profile = lazy(() => import('../../pages/Profile'));\nconst Auth = lazy(() => import('../../pages/Auth'));\nconst Home = lazy(() => import('../../pages/Home'));\nconst Photo = lazy(() => import('../../pages/Photo'));\nconst Encrypt = lazy(() => import('../../pages/Encrypt'));\n\ninterface State extends ContextType {\n  list: [];\n}\n\ninterface Map {\n  [key: string]: ListItem;\n}\n\nexport default class App extends Component {\n  setUsers = (list: AV.Queriable[]) => {\n    this.setState({\n      users: list,\n    });\n  };\n\n  setRounds = (list: AV.Queriable[]) => {\n    this.setState({\n      rounds: list,\n    });\n  };\n\n  setRoundUserInfo = (list: AV.Queriable[][]) => {\n    this.setState(\n      {\n        roundUserInfo: list,\n      },\n      this.calcList\n    );\n  };\n\n  setShowSession = (isShow?: boolean) => {\n    this.setState({\n      showSession: !!isShow,\n    });\n  };\n\n  setIsAuthenticated = (isAuth: boolean) => {\n    this.setState({\n      isAuthenticated: isAuth,\n    });\n  };\n\n  state: State = {\n    users: [],\n    rounds: [],\n    roundUserInfo: [],\n    showSession: false,\n    isAuthenticated: false,\n    setUsers: this.setUsers,\n    setRounds: this.setRounds,\n    setRoundUserInfo: this.setRoundUserInfo,\n    setShowSession: this.setShowSession,\n    setIsAuthenticated: this.setIsAuthenticated,\n\n    list: [],\n  };\n\n  componentDidMount() {\n    this.getUsers();\n    this.getAllRounds();\n  }\n\n  getUsers = () => {\n    const query = new AV.Query('Player');\n    query.find().then((players: AV.Queriable[]) => {\n      this.setUsers(players);\n    });\n  };\n\n  getAllRounds = () => {\n    const rounds = new AV.Query('Round');\n    rounds.find().then((res) => {\n      Promise.all(\n        res.map((round) => {\n          return this.getRoundInfo(round);\n        })\n      ).then((roundInfos) => {\n        this.setRounds(res);\n        this.setRoundUserInfo(roundInfos);\n      });\n    });\n  };\n\n  getRoundInfo = (round: AV.Queriable) => {\n    const query = new AV.Query('RoundUserInfo');\n    query.equalTo('round', round);\n    return query.find();\n  };\n\n  handleAddDone = () => {\n    this.getAllRounds();\n  };\n\n  calcList() {\n    let { roundUserInfo, rounds } = this.state;\n    let tmp: Map = {};\n    roundUserInfo.forEach((round: AV.Object[], index) => {\n      let leverage = rounds[index].get('leverage');\n      round.forEach((info) => {\n        let player = info.get('player');\n        let amount = info.get('amount');\n        amount = +amount;\n        let playerId = player.get('objectId');\n        let userRoundInfo = tmp[playerId];\n        if (!userRoundInfo) {\n          userRoundInfo = {\n            max: 0,\n            min: 0,\n            total: 0,\n            totalBalance: 0,\n            count: 0,\n            player,\n            currentLeverage: 0,\n          };\n        }\n        if (amount > userRoundInfo.max) {\n          userRoundInfo.max = amount;\n        }\n        if (amount < userRoundInfo.min) {\n          userRoundInfo.min = amount;\n        }\n        userRoundInfo.total = +new Big(userRoundInfo.total)\n          .plus(amount)\n          .valueOf();\n        userRoundInfo.totalBalance = +new Big(userRoundInfo.totalBalance)\n          .plus(new Big(amount).times(leverage))\n          .valueOf();\n        if (amount !== 0) {\n          userRoundInfo.count++;\n        }\n        tmp[playerId] = userRoundInfo;\n      });\n    });\n    let list = _.values(tmp);\n    list.sort((a: ListItem, b: ListItem) => {\n      return b.totalBalance - a.totalBalance;\n    });\n    this.setState({\n      list,\n    });\n  }\n\n  render() {\n    let {\n      users,\n      rounds,\n      roundUserInfo,\n      showSession,\n      setUsers,\n      setRounds,\n      setRoundUserInfo,\n      setShowSession,\n      list,\n      isAuthenticated,\n      setIsAuthenticated,\n    } = this.state;\n    const isDev = process.env.NODE_ENV === 'development';\n    return (\n      <div className=\"app\">\n        <AppContext.Provider\n          value={{\n            users,\n            rounds,\n            roundUserInfo,\n            showSession,\n            setUsers,\n            setRounds,\n            setRoundUserInfo,\n            setShowSession,\n            isAuthenticated,\n            setIsAuthenticated,\n          }}\n        >\n          <Router>\n            {isAuthenticated || isDev ? <TopBar /> : null}\n            <Suspense\n              fallback={\n                <div\n                  style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                  }}\n                >\n                  <Spin />\n                </div>\n              }\n            >\n              <Switch>\n                <PrivateRoute path=\"/photo\">\n                  <Photo />\n                </PrivateRoute>\n                <PrivateRoute path=\"/message\">\n                  <Message />\n                </PrivateRoute>\n                <PrivateRoute path=\"/profile\">\n                  <Profile />\n                </PrivateRoute>\n                <Route path=\"/encrypt\">\n                  <Encrypt />\n                </Route>\n                <Route path=\"/auth\">\n                  <Auth />\n                </Route>\n                <PrivateRoute path=\"/\">\n                  <Home list={list} onAddDone={this.handleAddDone} />\n                </PrivateRoute>\n              </Switch>\n            </Suspense>\n          </Router>\n        </AppContext.Provider>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport AV from 'leancloud-storage';\nimport zhCN from 'antd/es/locale/zh_CN';\nimport { ConfigProvider } from 'antd';\n\nAV.init({\n  appId: 'xfKlG0D6VO6MgwOUTzQ31f7W-gzGzoHsz',\n  appKey: 'k9TuwPqFQmsMqj3HYa83WCFs',\n  serverURL: 'https://xfklg0d6.lc-cn-n1-shared.com',\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConfigProvider locale={zhCN}>\n      <App />\n    </ConfigProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}